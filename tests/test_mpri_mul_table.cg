## tests/test_mpri_mul_table.cg -- GAP master script
## MPRIA - GNU Multi-Precision Rational Interval Arithmetic Library
## Copyright (C) 2009-2016  Jerome Benoit <jgmbenoit@rezozer.net>
##
## This file is part of the GNU MPRIA Library.
##
## The GNU MPRIA Library is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## The GNU MPRIA Library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with the GNU MPRIA Library.  If not, see <http://www.gnu.org/licenses/>.
##

MPRIAMasterFileNameComment:=function() return ("not human readable"); end;;

Read("mpria_test.gi");
if (IsBound(MPRIAMasterFileName) and (MPRIAMasterFileName <> fail)) then

compute_multiplication:=function(multiplier,multiplicand)
	local answer;
	if not(is_rational_interval(multiplier)) then
		Error("the first argument must be a valid rational interval, got ", multiplier);
	fi;
	if not(is_rational_interval(multiplicand)) then
		Error("the second argument must be a valid rational interval, got ", multiplicand);
	fi;
	answer:=[
		multiplier[1]*multiplicand[1],
		multiplier[1]*multiplicand[2],
		multiplier[2]*multiplicand[1],
		multiplier[2]*multiplicand[2]
		];
	answer:=[Minimum(answer),Maximum(answer)];
	return answer;
end;

listof_candidate:=[
	##
	[[0,0],[0,0]],
	[[0,0],[0,7/11]],
	[[0,0],[-5/17,0]],
	[[0,0],[1/2,11/3]],
	[[0,0],[-7/2,-1/3]],
	[[0,0],[-7/2,+17/11]],
	##
	[[0,1/2],[0,0]],
	[[0,1/2],[0,+7/3]],
	[[0,1/2],[+7/3,+17/5]],
	[[0,1/11],[-7/3,0]],
	[[0,1/23],[-17/5,-7/3]],
	[[0,1/31],[-17/5,+7/3]],
	[[0,1/31],[-7/3,+17/5]],
	##
	[[-1/2,0],[0,0]],
	[[-1/2,0],[0,+7/3]],
	[[-1/2,0],[+7/3,+17/5]],
	[[-1/11,0],[-7/3,0]],
	[[-1/23,0],[-17/5,-7/3]],
	[[-1/31,0],[-17/5,+7/3]],
	[[-1/31,0],[-7/3,+17/5]],
	##
	[[1/5,17/3],[0,0]],
	[[1/5,17/3],[0,+11/2]],
	[[1/5,17/3],[-11/2,0]],
	[[1/5,17/3],[+1/7,+2/11]],
	[[1/5,17/3],[-2/11,-1/7]],
	[[1/5,17/3],[-2/11,+1/7]],
	[[1/5,17/3],[-1/7,+2/11]],
	[[17/3,17/3],[0,0]],
	[[1/5,1/5],[0,+11/2]],
	[[17/3,17/3],[-11/2,0]],
	[[1/5,1/5],[+1/7,+2/11]],
	[[17/3,17/3],[-2/11,-1/7]],
	[[1/5,1/5],[-2/11,+1/7]],
	[[17/3,17/3],[-1/7,+2/11]],
	[[17/3,17/3],[-2/11,-2/11]],
	[[1/5,1/5],[-1/7,+1/7]],
	[[17/3,17/3],[+1/17,+1/17]],
	##
	[[-17/3,-1/5],[0,0]],
	[[-17/3,-1/5],[0,+23/101]],
	[[-17/3,-1/5],[-23/101,0]],
	[[-17/3,-1/5],[+1/7,+2/11]],
	[[-17/3,-1/5],[-2/11,-1/7]],
	[[-17/3,-1/5],[-2/11,+1/7]],
	[[-17/3,-1/5],[-1/7,+2/11]],
	[[-17/3,-17/3],[0,0]],
	[[-1/5,-1/5],[0,+23/101]],
	[[-17/3,-17/3],[-23/101,0]],
	[[-1/5,-1/5],[+1/7,+2/11]],
	[[-17/3,-17/3],[-2/11,-2/11]],
	[[-1/5,-1/5],[-1/7,+1/7]],
	[[-17/3,-17/3],[+2/11,+2/11]],
	[[-17/3,-17/3],[-2/11,-1/7]],
	[[-1/5,-1/5],[-2/11,+1/7]],
	[[-17/3,-17/3],[-1/7,+2/11]],
	##
	[[-17/7,+11/19],[0,0]],
	[[-17/7,+11/19],[0,+3/5]],
	[[-17/7,+11/19],[-1/5,0]],
	[[-17/7,+11/19],[+1/11,+101/5]],
	[[-17/7,+11/19],[-101/5,-1/11]],
	[[-11/19,+11/19],[0,0]],
	[[-17/7,+17/7],[0,+3/5]],
	[[-11/19,+11/19],[-1/5,0]],
	[[-17/7,+17/7],[+1/11,+101/5]],
	[[-11/19,+11/19],[-101/5,-1/11]],
	####
		[[-1/7,+1/7],[-1/5,+1/5]],
		[[-1/7,+1/7],[-1/5,+3/5]],
		[[-1/7,+1/7],[-3/5,+1/5]],
		####
			[[-1/7,+11/7],[-1/5,+1/5]],
			##
			[[-1/7,+11/7],[-1/2,+17/5]],
			[[-1/7,+11/7],[-1/5,+17/5]],
			##
			[[-1/7,+11/7],[-17/5,+1/5]],
			[[-1/7,+11/7],[-17/5,+2/5]],
		####
			[[-11/7,+1/7],[-1/5,+1/5]],
			##
			[[-11/7,+1/7],[-2/5,+17/5]],
			[[-11/7,+1/7],[-1/5,+17/5]],
			##
			[[-11/7,+1/7],[-17/5,+1/5]],
			[[-11/7,+1/7],[-17/5,+2/5]],
	##
	];

listof_operand:=Set(Concatenation(listof_candidate));

listof_candidate:=Concatenation(List(listof_candidate,c->Set([c,Reversed(c)])));
Append(listof_candidate,List(listof_operand,c->[c,c]));

listof_candidate:=Set(listof_candidate);

## preamble
MPRIACInputOpen();

## amble
MPRIACInputWriteTestTableLineBEGIN();

for cdx in listof_candidate do
	AppendTo(CInputStream,
		"\t{",
		SeqStringifyListOfNum([cdx,compute_multiplication(cdx[1],cdx[2])]),
		"},\n"
		);
od;

MPRIACInputWriteTestTableLineEND("{NULL,NULL,NULL,NULL,NULL,NULL}");

## postamble
MPRIACInputClose();

fi;
QUIT;
##
## vim:syntax=gap
##
## End of file tests/test_mpri_mul_table.cg
