## tests/test_mpri_div_table.cg -- GAP master script
## MPRIA - GNU Multi-Precision Rational Interval Arithmetic Library
## Copyright (C) 2009-2016  Jerome Benoit <jgmbenoit@rezozer.net>
##
## This file is part of the GNU MPRIA Library.
##
## The GNU MPRIA Library is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## The GNU MPRIA Library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with the GNU MPRIA Library.  If not, see <http://www.gnu.org/licenses/>.
##

MPRIAMasterFileNameComment:=function() return ("not human readable"); end;;

Read("mpria_test.gi");
if (IsBound(MPRIAMasterFileName) and (MPRIAMasterFileName <> fail)) then

compute_division:=function(dividend,divisor)
	local answer;
	if not(is_rational_interval(dividend)) then
		Error("the first argument must be a valid rational interval, got ", dividend);
	fi;
	if not(is_rational_interval(divisor)) then
		Error("the second argument must be a valid rational interval, got ", divisor);
	fi;
	if ((0 < divisor[1]) or (divisor[2] < 0)) then
		answer:=[
			dividend[1]/divisor[1],
			dividend[1]/divisor[2],
			dividend[2]/divisor[1],
			dividend[2]/divisor[2]
			];
		answer:=[Minimum(answer),Maximum(answer)];
	else
		answer:=[NAN,NAN];
	fi;
	return answer;
end;

listof_candidate:=[
	##
	[[0,0],[+1/2,+11/3]],
	[[0,17/5],[+1/2,+11/3]],
	[[-17/5,0],[+1/2,+11/3]],
	[[+5/17,+23/11],[+1/2,+11/3]],
	[[-23/11,-5/17],[+1/2,+11/3]],
	[[-23/11,+5/17],[+1/2,+11/3]],
	[[-5/17,+23/11],[+1/2,+11/3]],
	[[0,0],[+11/3,+11/3]],
	[[0,17/5],[+1/2,+1/2]],
	[[-17/5,0],[+11/3,+11/3]],
	[[+5/17,+23/11],[+1/2,+1/2]],
	[[-23/11,-5/17],[+11/3,+11/3]],
	[[-23/11,+5/17],[+1/2,+1/2]],
	[[-5/17,+23/11],[+11/3,+11/3]],
	##
	[[0,0],[-11/3,-1/7]],
	[[0,17/5],[-11/3,-1/7]],
	[[-17/5,0],[-11/3,-1/7]],
	[[+5/17,+23/11],[-11/3,-1/7]],
	[[-23/11,-5/17],[-11/3,-1/7]],
	[[-23/11,+5/17],[-11/3,-1/7]],
	[[-5/17,+23/11],[-11/3,-1/7]],
	[[0,0],[-11/3,-11/3]],
	[[0,17/5],[-1/7,-1/7]],
	[[-17/5,0],[-11/3,-11/3]],
	[[+5/17,+23/11],[-1/7,-1/7]],
	[[-23/11,-5/17],[-11/3,-11/3]],
	[[-23/11,+5/17],[-1/7,-1/7]],
	[[-5/17,+23/11],[-11/3,-11/3]],
	####
		[[0,0],[0,0]],
		[[0,+11/7],[0,0]],
		[[-11/7,0],[0,0]],
		[[+3/5,+7/5],[0,0]],
		[[-7/5,-3/5],[0,0]],
		[[-3/5,+7/5],[0,0]],
		[[-3/5,-3/5],[0,0]],
		[[+7/5,+7/5],[0,0]],
		##
		[[0,0],[0,+3/7]],
		[[0,+11/7],[0,+3/7]],
		[[-11/7,0],[0,+3/7]],
		[[+3/5,+7/5],[0,+3/7]],
		[[-7/5,-3/5],[0,+3/7]],
		[[-3/5,+7/5],[0,+3/7]],
		[[-7/5,-7/5],[0,+3/7]],
		[[+3/5,+3/5],[0,+3/7]],
		##
		[[0,0],[-1/2,0]],
		[[0,+11/7],[-1/2,0]],
		[[-11/7,0],[-1/2,0]],
		[[+3/5,+7/5],[-1/2,0]],
		[[-7/5,-3/5],[-1/2,0]],
		[[-3/5,+7/5],[-1/2,0]],
		[[-3/5,-3/5],[-1/2,0]],
		[[+7/5,+7/5],[-1/2,0]],
		##
		[[0,0],[-1/2,+3/7]],
		[[0,+11/7],[-1/2,+3/7]],
		[[-11/7,0],[-1/2,+3/7]],
		[[+3/5,+7/5],[-1/2,+3/7]],
		[[-7/5,-3/5],[-1/2,+3/7]],
		[[-3/5,+7/5],[-1/2,+3/7]],
		[[-7/5,-7/5],[-1/2,+3/7]],
		[[+3/5,+3/5],[-1/2,+3/7]],
	##
	];

listof_operand:=Set(Concatenation(listof_candidate));

Append(listof_candidate,List(listof_operand,c->[c,c]));

listof_candidate:=Set(listof_candidate);

## preamble
MPRIACInputOpen();

## amble
MPRIACInputWriteTestTableLineBEGIN();

for cdx in listof_candidate do
	AppendTo(CInputStream,
		"\t{",
		SeqStringifyListOfNum([cdx,compute_division(cdx[1],cdx[2])]),
		"},\n"
		);
od;

MPRIACInputWriteTestTableLineEND("{NULL,NULL,NULL,NULL,NULL,NULL}");

## postamble
MPRIACInputClose();

fi;
QUIT;
##
## vim:syntax=gap
##
## End of file tests/test_mpri_div_table.cg
